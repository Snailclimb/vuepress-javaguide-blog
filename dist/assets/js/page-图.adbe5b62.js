(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{530:function(t,s,v){t.exports=v.p+"assets/img/图.1d878a70.png"},531:function(t,s,v){t.exports=v.p+"assets/img/无向图的邻接矩阵存储.2c363210.png"},532:function(t,s,v){t.exports=v.p+"assets/img/有向图的邻接矩阵存储.441a66c4.png"},533:function(t,s,v){t.exports=v.p+"assets/img/无向图的邻接表存储.6cbabe15.png"},534:function(t,s,v){t.exports=v.p+"assets/img/有向图的邻接表存储.79768346.png"},535:function(t,s,v){t.exports=v.p+"assets/img/广度优先搜索图示.17d49cc0.png"},536:function(t,s,v){t.exports=v.p+"assets/img/广度优先搜索1.bdfc82bc.png"},537:function(t,s,v){t.exports=v.p+"assets/img/广度优先搜索2.1e4cb2cc.png"},538:function(t,s,v){t.exports=v.p+"assets/img/广度优先搜索3.6b0a50c4.png"},539:function(t,s,v){t.exports=v.p+"assets/img/广度优先搜索4.b6f06f4e.png"},540:function(t,s,v){t.exports=v.p+"assets/img/广度优先搜索5.760e1b89.png"},541:function(t,s,v){t.exports=v.p+"assets/img/广度优先搜索6.1b929b76.png"},542:function(t,s,v){t.exports=v.p+"assets/img/深度优先搜索图示.37909751.png"},543:function(t,s,v){t.exports=v.p+"assets/img/深度优先搜索1.a613e87c.png"},544:function(t,s,v){t.exports=v.p+"assets/img/深度优先搜索2.e15f825a.png"},545:function(t,s,v){t.exports=v.p+"assets/img/深度优先搜索3.574dd9c0.png"},546:function(t,s,v){t.exports=v.p+"assets/img/深度优先搜索4.5d7b2527.png"},547:function(t,s,v){t.exports=v.p+"assets/img/深度优先搜索5.c0339948.png"},548:function(t,s,v){t.exports=v.p+"assets/img/深度优先搜索6.5be47dea.png"},666:function(t,s,v){"use strict";v.r(s);var _=v(1),a=Object(_.a)({},(function(){var t=this,s=t.$createElement,_=t._self._c||s;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图"}},[t._v("#")]),t._v(" 图")]),t._v(" "),_("blockquote",[_("p",[t._v("开头还是求点赞，求转发！原创优质公众号，希望大家能让更多人看到我们的文章。")]),t._v(" "),_("p",[t._v("图片都是我们手绘的，可以说非常用心了！")])]),t._v(" "),_("p",[t._v("图是一种较为复杂的非线性结构。 "),_("strong",[t._v("为啥说其较为复杂呢？")])]),t._v(" "),_("p",[t._v("根据前面的内容，我们知道：")]),t._v(" "),_("ul",[_("li",[t._v("线性数据结构的元素满足唯一的线性关系，每个元素(除第一个和最后一个外)只有一个直接前趋和一个直接后继。")]),t._v(" "),_("li",[t._v("树形数据结构的元素之间有着明显的层次关系。")])]),t._v(" "),_("p",[t._v("但是，图形结构的元素之间的关系是任意的。")]),t._v(" "),_("p",[_("strong",[t._v("何为图呢？")]),t._v(" 简单来说，图就是由顶点的有穷非空集合和顶点之间的边组成的集合。通常表示为："),_("strong",[t._v("G(V,E)")]),t._v("，其中，G表示一个图，V表示顶点的集合，E表示边的集合。")]),t._v(" "),_("p",[t._v("下图所展示的就是图这种数据结构，并且还是一张有向图。")]),t._v(" "),_("p",[_("img",{attrs:{src:v(530),alt:"图"}})]),t._v(" "),_("p",[t._v("图在我们日常生活中的例子很多！比如我们在社交软件上好友关系就可以用图来表示。")]),t._v(" "),_("h2",{attrs:{id:"图的基本概念"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图的基本概念"}},[t._v("#")]),t._v(" 图的基本概念")]),t._v(" "),_("h3",{attrs:{id:"顶点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#顶点"}},[t._v("#")]),t._v(" 顶点")]),t._v(" "),_("p",[t._v("图中的数据元素，我们称之为顶点，图至少有一个顶点（非空有穷集合）")]),t._v(" "),_("p",[t._v("对应到好友关系图，每一个用户就代表一个顶点。")]),t._v(" "),_("h3",{attrs:{id:"边"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#边"}},[t._v("#")]),t._v(" 边")]),t._v(" "),_("p",[t._v("顶点之间的关系用边表示。")]),t._v(" "),_("p",[t._v("对应到好友关系图，两个用户是好友的话，那两者之间就存在一条边。")]),t._v(" "),_("h3",{attrs:{id:"度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#度"}},[t._v("#")]),t._v(" 度")]),t._v(" "),_("p",[t._v("度表示一个顶点包含多少条边，在有向图中，还分为出度和入度，出度表示从该顶点出去的边的条数，入度表示进入该顶点的边的条数。")]),t._v(" "),_("p",[t._v("对应到好友关系图，度就代表了某个人的好友数量。")]),t._v(" "),_("h3",{attrs:{id:"无向图和有向图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#无向图和有向图"}},[t._v("#")]),t._v(" 无向图和有向图")]),t._v(" "),_("p",[t._v("边表示的是顶点之间的关系，有的关系是双向的，比如同学关系，A是B的同学，那么B也肯定是A的同学，那么在表示A和B的关系时，就不用关注方向，用不带箭头的边表示，这样的图就是无向图。")]),t._v(" "),_("p",[t._v("有的关系是有方向的，比如父子关系，师生关系，微博的关注关系，A是B的爸爸，但B肯定不是A的爸爸，A关注B，B不一定关注A。在这种情况下，我们就用带箭头的边表示二者的关系，这样的图就是有向图。")]),t._v(" "),_("h3",{attrs:{id:"无权图和带权图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#无权图和带权图"}},[t._v("#")]),t._v(" 无权图和带权图")]),t._v(" "),_("p",[t._v("对于一个关系，如果我们只关心关系的有无，而不关心关系有多强，那么就可以用无权图表示二者的关系。")]),t._v(" "),_("p",[t._v("对于一个关系，如果我们既关心关系的有无，也关心关系的强度，比如描述地图上两个城市的关系，需要用到距离，那么就用带权图来表示，带权图中的每一条边一个数值表示权值，代表关系的强度。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/数据结构/1*FvCzzcpYVwyB759QKoDCOQ.png",alt:""}})]),t._v(" "),_("h2",{attrs:{id:"图的存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图的存储"}},[t._v("#")]),t._v(" 图的存储")]),t._v(" "),_("h3",{attrs:{id:"邻接矩阵存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#邻接矩阵存储"}},[t._v("#")]),t._v(" 邻接矩阵存储")]),t._v(" "),_("p",[t._v("邻接矩阵将图用二维矩阵存储，是一种较为直观的表示方式。")]),t._v(" "),_("p",[t._v("如果第i个顶点和第j个顶点之间有关系，且关系权值为n，则 "),_("code",[t._v("A[i][j]=n")]),t._v(" 。")]),t._v(" "),_("p",[t._v("在无向图中，我们只关心关系的有无，所以当顶点i和顶点j有关系时，"),_("code",[t._v("A[i][j]")]),t._v("=1，当顶点i和顶点j没有关系时，"),_("code",[t._v("A[i][j]")]),t._v("=0。如下图所示：")]),t._v(" "),_("p",[_("img",{attrs:{src:v(531),alt:"无向图的邻接矩阵存储"}})]),t._v(" "),_("p",[t._v("值得注意的是："),_("strong",[t._v("无向图的邻接矩阵是一个对称矩阵，因为在无向图中，顶点i和顶点j有关系，则顶点j和顶点i必有关系。")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(532),alt:"有向图的邻接矩阵存储"}})]),t._v(" "),_("p",[t._v("邻接矩阵存储的方式优点是简单直接（直接使用一个二维数组即可），并且，在获取两个定点之间的关系的时候也非常高效（直接获取指定位置的数组元素的值即可）。但是，这种存储方式的缺点也比较明显，那就是比较浪费空间，")]),t._v(" "),_("h3",{attrs:{id:"邻接表存储"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#邻接表存储"}},[t._v("#")]),t._v(" 邻接表存储")]),t._v(" "),_("p",[t._v("针对上面邻接矩阵比较浪费内存空间的问题，诞生了图的另外一种存储方法—"),_("strong",[t._v("邻接表")]),t._v(" 。")]),t._v(" "),_("p",[t._v("邻接链表使用一个链表来存储某个顶点的所有后继相邻顶点。对于图中每个顶点Vi，把所有邻接于Vi的顶点Vj链成一个单链表，这个单链表称为顶点Vi的 "),_("strong",[t._v("邻接表")]),t._v("。如下图所示：")]),t._v(" "),_("p",[_("img",{attrs:{src:v(533),alt:"无向图的邻接表存储"}})]),t._v(" "),_("p",[_("img",{attrs:{src:v(534),alt:"有向图的邻接表存储"}})]),t._v(" "),_("p",[t._v("大家可以数一数邻接表中所存储的元素的个数以及图中边的条数，你会发现：")]),t._v(" "),_("ul",[_("li",[t._v("在无向图中，邻接表元素个数等于边的条数的两倍，如左图所示的无向图中，边的条数为7，邻接表存储的元素个数为14。")]),t._v(" "),_("li",[t._v("在有向图中，邻接表元素个数等于边的条数，如右图所示的有向图中，边的条数为8，邻接表存储的元素个数为8。")])]),t._v(" "),_("h2",{attrs:{id:"图的搜索"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#图的搜索"}},[t._v("#")]),t._v(" 图的搜索")]),t._v(" "),_("h3",{attrs:{id:"广度优先搜索"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索"}},[t._v("#")]),t._v(" 广度优先搜索")]),t._v(" "),_("p",[t._v("广度优先搜索就像水面上的波纹一样一层一层向外扩展，如下图所示：")]),t._v(" "),_("p",[_("img",{attrs:{src:v(535),alt:"广度优先搜索图示"}})]),t._v(" "),_("p",[_("strong",[t._v("广度优先搜索的具体实现方式用到了之前所学过的线性数据结构——队列")]),t._v(" 。具体过程如下图所示：")]),t._v(" "),_("p",[_("strong",[t._v("第1步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(536),alt:"广度优先搜索1"}})]),t._v(" "),_("p",[_("strong",[t._v("第2步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(537),alt:"广度优先搜索2"}})]),t._v(" "),_("p",[_("strong",[t._v("第3步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(538),alt:"广度优先搜索3"}})]),t._v(" "),_("p",[_("strong",[t._v("第4步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(539),alt:"广度优先搜索4"}})]),t._v(" "),_("p",[_("strong",[t._v("第5步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(540),alt:"广度优先搜索5"}})]),t._v(" "),_("p",[_("strong",[t._v("第6步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(541),alt:"广度优先搜索6"}})]),t._v(" "),_("h3",{attrs:{id:"深度优先搜索"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索"}},[t._v("#")]),t._v(" 深度优先搜索")]),t._v(" "),_("p",[t._v("深度优先搜索就是“一条路走到黑”，从源顶点开始，一直走到没有后继节点，才回溯到上一顶点，然后继续“一条路走到黑”，如下图所示：")]),t._v(" "),_("p",[_("img",{attrs:{src:v(542),alt:"深度优先搜索图示"}})]),t._v(" "),_("p",[_("strong",[t._v("和广度优先搜索类似，深度优先搜索的具体实现用到了另一种线性数据结构——栈")]),t._v(" 。具体过程如下图所示：")]),t._v(" "),_("p",[_("strong",[t._v("第1步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(543),alt:"深度优先搜索1"}})]),t._v(" "),_("p",[_("strong",[t._v("第2步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(544),alt:"深度优先搜索1"}})]),t._v(" "),_("p",[_("strong",[t._v("第3步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(545),alt:"深度优先搜索1"}})]),t._v(" "),_("p",[_("strong",[t._v("第4步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(546),alt:"深度优先搜索1"}})]),t._v(" "),_("p",[_("strong",[t._v("第5步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(547),alt:"深度优先搜索1"}})]),t._v(" "),_("p",[_("strong",[t._v("第6步：")])]),t._v(" "),_("p",[_("img",{attrs:{src:v(548),alt:"深度优先搜索1"}})])])}),[],!1,null,null,null);s.default=a.exports}}]);